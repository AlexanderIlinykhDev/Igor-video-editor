import { Typography, Input, Button } from 'antd';
import { ReactEventHandler, useCallback, useEffect, useRef, useState } from 'react';
import Slider from 'rc-slider';
import 'rc-slider/assets/index.css';
import styles from './video-player.module.scss';

type Props = {
  videoPreviewSrc: string;
  videoDuration: number;
  setVideoDuration: (videoDuration: number) => void;
  startTime: number;
  setStartTime: (setStartTime: number) => void;
  finishTime: number;
  setFinishTime: (setFinishTime: number) => void;
};

export default function VideoPlayer({
  videoPreviewSrc,
  videoDuration,
  setVideoDuration,
  startTime,
  setStartTime,
  finishTime,
  setFinishTime,
}: Props) {
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    if (videoRef.current) {
      handleGettingDuration(videoRef.current);
      setFinishTime(startTime + videoRef.current.duration);
      videoRef.current.currentTime = startTime;
    }

    async function handleGettingDuration(element: HTMLVideoElement) {
      element.onloadedmetadata = function () {
        setVideoDuration(element.duration);
        setFinishTime(startTime + element.duration);
      };
    }
  }, [videoRef.current]);

  useEffect(() => {
    if (videoRef.current) {
      videoRef.current.currentTime = startTime;
    }
  }, [startTime, finishTime]);

  const handleTimeUpdate: ReactEventHandler<HTMLVideoElement> = e => {
    if (e.target) {
      if (e.currentTarget.currentTime < startTime || e.currentTarget.currentTime > finishTime) {
        e.currentTarget.pause();
        e.currentTarget.currentTime = startTime;
      }
    }
  };
  const handleStartTimeChanging: ReactEventHandler<HTMLInputElement> = e => {
    console.log('StartTimeChanging');
    if (e.currentTarget.value)
      if (startTime < finishTime - 2) {
        setStartTime(Number(e.currentTarget.value));
      } else {
        setStartTime(Number(e.currentTarget.value) - 1);
      }
  };
  const handleFinishTimeChanging: ReactEventHandler<HTMLInputElement> = e => {
    if (startTime < finishTime - 1) {
      setFinishTime(Number(e.currentTarget.value));
    }
  };

  return (
    <section className={styles.container}>
      Preview: confirm that allâ€™s good
      <video
        ref={videoRef}
        className={styles['video-player']}
        src={videoPreviewSrc}
        onTimeUpdate={handleTimeUpdate}
        controls
      ></video>
      {videoDuration && (
        <div className={styles['slider-container']}>
          <input
            type='range'
            min='0'
            max={videoDuration}
            className={`${styles['slider']} ${styles['slider-start']}`}
            id='myRange'
            onChange={handleStartTimeChanging}
            value={String(startTime)}
          />
          <input
            type='range'
            min='0'
            max={videoDuration}
            className={`${styles['slider']} ${styles['slider-finish']}`}
            id='myRange'
            onChange={handleFinishTimeChanging}
            value={String(finishTime)}
          />
        </div>
      )}
      <div className={styles.slider}>
        <Slider range allowCross={false} defaultValue={[0, 20]} onChange={console.log} reverse />
      </div>
    </section>
  );
}
